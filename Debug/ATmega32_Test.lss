
ATmega32_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001117  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000407  00000000  00000000  00001617  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ab  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d4  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000092f  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e2e  00000000  00000000  00002bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  000039fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  74:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPinDirection>:
   return Port_State;
}

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
   if(u8_direction == OUTPUT)
  7c:	4f 3f       	cpi	r20, 0xFF	; 255
  7e:	c1 f4       	brne	.+48     	; 0xb0 <gpioPinDirection+0x34>
   {
	 switch(u8_port)
  80:	81 30       	cpi	r24, 0x01	; 1
  82:	51 f0       	breq	.+20     	; 0x98 <gpioPinDirection+0x1c>
  84:	28 f0       	brcs	.+10     	; 0x90 <gpioPinDirection+0x14>
  86:	82 30       	cpi	r24, 0x02	; 2
  88:	59 f0       	breq	.+22     	; 0xa0 <gpioPinDirection+0x24>
  8a:	83 30       	cpi	r24, 0x03	; 3
  8c:	69 f0       	breq	.+26     	; 0xa8 <gpioPinDirection+0x2c>
  8e:	08 95       	ret
	 {
		case GPIOA:
	            	PORTA_DIR |= (u8_pins);
  90:	8a b3       	in	r24, 0x1a	; 26
  92:	68 2b       	or	r22, r24
  94:	6a bb       	out	0x1a, r22	; 26
		            break;
  96:	08 95       	ret
		case GPIOB:
		            PORTB_DIR |= (u8_pins);
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	68 2b       	or	r22, r24
  9c:	67 bb       	out	0x17, r22	; 23
		            break;
  9e:	08 95       	ret
		case GPIOC:
		            PORTC_DIR |= (u8_pins);
  a0:	84 b3       	in	r24, 0x14	; 20
  a2:	68 2b       	or	r22, r24
  a4:	64 bb       	out	0x14, r22	; 20
		            break;
  a6:	08 95       	ret
		case GPIOD:
		            PORTD_DIR |= (u8_pins);
  a8:	81 b3       	in	r24, 0x11	; 17
  aa:	68 2b       	or	r22, r24
  ac:	61 bb       	out	0x11, r22	; 17
		            break;
  ae:	08 95       	ret
		default:
		            break;
	 }    
   }
   else if(u8_direction == INPUT)
  b0:	41 11       	cpse	r20, r1
  b2:	1b c0       	rjmp	.+54     	; 0xea <gpioPinDirection+0x6e>
   {
	 switch(u8_port)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	59 f0       	breq	.+22     	; 0xce <gpioPinDirection+0x52>
  b8:	28 f0       	brcs	.+10     	; 0xc4 <gpioPinDirection+0x48>
  ba:	82 30       	cpi	r24, 0x02	; 2
  bc:	69 f0       	breq	.+26     	; 0xd8 <gpioPinDirection+0x5c>
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	81 f0       	breq	.+32     	; 0xe2 <gpioPinDirection+0x66>
  c2:	08 95       	ret
     {
		   case GPIOA:
		                PORTA_DIR &= (~u8_pins);
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	60 95       	com	r22
  c8:	68 23       	and	r22, r24
  ca:	6a bb       	out	0x1a, r22	; 26
		                break;
  cc:	08 95       	ret
		   case GPIOB:
		                PORTB_DIR &= (~u8_pins);
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	60 95       	com	r22
  d2:	68 23       	and	r22, r24
  d4:	67 bb       	out	0x17, r22	; 23
		                break;
  d6:	08 95       	ret
		   case GPIOC:
		                PORTC_DIR &= (~u8_pins);
  d8:	84 b3       	in	r24, 0x14	; 20
  da:	60 95       	com	r22
  dc:	68 23       	and	r22, r24
  de:	64 bb       	out	0x14, r22	; 20
		                break;
  e0:	08 95       	ret
		   case GPIOD:
		                PORTD_DIR &= (~u8_pins);
  e2:	81 b3       	in	r24, 0x11	; 17
  e4:	60 95       	com	r22
  e6:	68 23       	and	r22, r24
  e8:	61 bb       	out	0x11, r22	; 17
  ea:	08 95       	ret

000000ec <gpioPinWrite>:
   }
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	if(u8_value == HIGH)
  ec:	4f 3f       	cpi	r20, 0xFF	; 255
  ee:	c1 f4       	brne	.+48     	; 0x120 <gpioPinWrite+0x34>
	{
		switch(u8_port)
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	51 f0       	breq	.+20     	; 0x108 <gpioPinWrite+0x1c>
  f4:	28 f0       	brcs	.+10     	; 0x100 <gpioPinWrite+0x14>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	59 f0       	breq	.+22     	; 0x110 <gpioPinWrite+0x24>
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	69 f0       	breq	.+26     	; 0x118 <gpioPinWrite+0x2c>
  fe:	08 95       	ret
		{
			case GPIOA:
			            PORTA_DATA |= (u8_pins);
 100:	8b b3       	in	r24, 0x1b	; 27
 102:	68 2b       	or	r22, r24
 104:	6b bb       	out	0x1b, r22	; 27
			            break;
 106:	08 95       	ret
			case GPIOB:
			            PORTB_DATA |= (u8_pins);
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	68 2b       	or	r22, r24
 10c:	68 bb       	out	0x18, r22	; 24
			            break;
 10e:	08 95       	ret
			case GPIOC:
			            PORTC_DATA |= (u8_pins);
 110:	85 b3       	in	r24, 0x15	; 21
 112:	68 2b       	or	r22, r24
 114:	65 bb       	out	0x15, r22	; 21
			            break;
 116:	08 95       	ret
			case GPIOD:
		             	PORTA_DATA |= (u8_pins);
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	68 2b       	or	r22, r24
 11c:	6b bb       	out	0x1b, r22	; 27
			            break;
 11e:	08 95       	ret
			default:
			            break;
		}
	}
	else if(u8_value == LOW)
 120:	41 11       	cpse	r20, r1
 122:	1b c0       	rjmp	.+54     	; 0x15a <gpioPinWrite+0x6e>
	{
		switch(u8_port)
 124:	81 30       	cpi	r24, 0x01	; 1
 126:	59 f0       	breq	.+22     	; 0x13e <gpioPinWrite+0x52>
 128:	28 f0       	brcs	.+10     	; 0x134 <gpioPinWrite+0x48>
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	69 f0       	breq	.+26     	; 0x148 <gpioPinWrite+0x5c>
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	81 f0       	breq	.+32     	; 0x152 <gpioPinWrite+0x66>
 132:	08 95       	ret
		{
			case GPIOA:
			            PORTA_DATA &= (~u8_pins);
 134:	8b b3       	in	r24, 0x1b	; 27
 136:	60 95       	com	r22
 138:	68 23       	and	r22, r24
 13a:	6b bb       	out	0x1b, r22	; 27
			            break;
 13c:	08 95       	ret
			case GPIOB:
			            PORTB_DATA &= (~u8_pins);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	60 95       	com	r22
 142:	68 23       	and	r22, r24
 144:	68 bb       	out	0x18, r22	; 24
			            break;
 146:	08 95       	ret
			case GPIOC:
			            PORTC_DATA &= (~u8_pins);
 148:	85 b3       	in	r24, 0x15	; 21
 14a:	60 95       	com	r22
 14c:	68 23       	and	r22, r24
 14e:	65 bb       	out	0x15, r22	; 21
	            		break;
 150:	08 95       	ret
			case GPIOD:
			            PORTA_DATA &= (~u8_pins);
 152:	8b b3       	in	r24, 0x1b	; 27
 154:	60 95       	com	r22
 156:	68 23       	and	r22, r24
 158:	6b bb       	out	0x1b, r22	; 27
 15a:	08 95       	ret

0000015c <Led_Init>:
#include "led.h"


void Led_Init(En_LedNumber_t en_led_id)
{
   switch(en_led_id) 
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	61 f0       	breq	.+24     	; 0x178 <Led_Init+0x1c>
 160:	28 f0       	brcs	.+10     	; 0x16c <Led_Init+0x10>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	79 f0       	breq	.+30     	; 0x184 <Led_Init+0x28>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	99 f0       	breq	.+38     	; 0x190 <Led_Init+0x34>
 16a:	08 95       	ret
   {
      case LED_0:
                    gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
 16c:	4f ef       	ldi	r20, 0xFF	; 255
 16e:	60 e1       	ldi	r22, 0x10	; 16
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
                    break;
 176:	08 95       	ret
      case LED_1:
                    gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
 178:	4f ef       	ldi	r20, 0xFF	; 255
 17a:	60 e2       	ldi	r22, 0x20	; 32
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
                    break;
 182:	08 95       	ret
      case LED_2:
                    gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
 184:	4f ef       	ldi	r20, 0xFF	; 255
 186:	60 e4       	ldi	r22, 0x40	; 64
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
                    break;
 18e:	08 95       	ret
      case LED_3:
                    gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
 190:	4f ef       	ldi	r20, 0xFF	; 255
 192:	60 e8       	ldi	r22, 0x80	; 128
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPinDirection>
 19a:	08 95       	ret

0000019c <Led_On>:
   }
}

void Led_On(En_LedNumber_t en_led_id)
{
   switch(en_led_id)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	61 f0       	breq	.+24     	; 0x1b8 <Led_On+0x1c>
 1a0:	28 f0       	brcs	.+10     	; 0x1ac <Led_On+0x10>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	79 f0       	breq	.+30     	; 0x1c4 <Led_On+0x28>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	99 f0       	breq	.+38     	; 0x1d0 <Led_On+0x34>
 1aa:	08 95       	ret
   {
      case LED_0:
                    gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
 1ac:	4f ef       	ldi	r20, 0xFF	; 255
 1ae:	60 e1       	ldi	r22, 0x10	; 16
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
                    break;
 1b6:	08 95       	ret
      case LED_1:
                    gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
 1b8:	4f ef       	ldi	r20, 0xFF	; 255
 1ba:	60 e2       	ldi	r22, 0x20	; 32
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
                    break;
 1c2:	08 95       	ret
      case LED_2:
                    gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
 1c4:	4f ef       	ldi	r20, 0xFF	; 255
 1c6:	60 e4       	ldi	r22, 0x40	; 64
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
                    break;
 1ce:	08 95       	ret
      case LED_3:
                    gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
 1d0:	4f ef       	ldi	r20, 0xFF	; 255
 1d2:	60 e8       	ldi	r22, 0x80	; 128
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 1da:	08 95       	ret

000001dc <Led_Off>:
   }
}

void Led_Off(En_LedNumber_t en_led_id)
{
   switch(en_led_id)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	61 f0       	breq	.+24     	; 0x1f8 <Led_Off+0x1c>
 1e0:	28 f0       	brcs	.+10     	; 0x1ec <Led_Off+0x10>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	79 f0       	breq	.+30     	; 0x204 <Led_Off+0x28>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	99 f0       	breq	.+38     	; 0x210 <Led_Off+0x34>
 1ea:	08 95       	ret
   {
       case LED_0:
                    gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	60 e1       	ldi	r22, 0x10	; 16
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
                    break;
 1f6:	08 95       	ret
       case LED_1:
                    gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
 1f8:	40 e0       	ldi	r20, 0x00	; 0
 1fa:	60 e2       	ldi	r22, 0x20	; 32
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
                    break;
 202:	08 95       	ret
       case LED_2:
                    gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	60 e4       	ldi	r22, 0x40	; 64
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
                    break;
 20e:	08 95       	ret
       case LED_3:
                    gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	60 e8       	ldi	r22, 0x80	; 128
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 76 00 	call	0xec	; 0xec <gpioPinWrite>
 21a:	08 95       	ret

0000021c <main>:
//-----------------------------------------------------------------------------
// Requirements (1 -> 6)

int main(void)
{
	Led_Init(LED_0);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 ae 00 	call	0x15c	; 0x15c <Led_Init>
	while(1) 
    {
		Led_On(LED_0);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 ce 00 	call	0x19c	; 0x19c <Led_On>
		softwareDelayMs(50);
 228:	62 e3       	ldi	r22, 0x32	; 50
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 24 01 	call	0x248	; 0x248 <softwareDelayMs>
		Led_Off(LED_0);
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Led_Off>
		softwareDelayMs(50);
 23a:	62 e3       	ldi	r22, 0x32	; 50
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 24 01 	call	0x248	; 0x248 <softwareDelayMs>
    } 
 246:	ed cf       	rjmp	.-38     	; 0x222 <main+0x6>

00000248 <softwareDelayMs>:
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	8b 01       	movw	r16, r22
 24e:	9c 01       	movw	r18, r24
  uint32_t ticks=2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 250:	67 2b       	or	r22, r23
 252:	68 2b       	or	r22, r24
 254:	69 2b       	or	r22, r25
 256:	81 f4       	brne	.+32     	; 0x278 <softwareDelayMs+0x30>
 258:	17 c0       	rjmp	.+46     	; 0x288 <softwareDelayMs+0x40>
 25a:	01 96       	adiw	r24, 0x01	; 1
  {
    for(i=0; i<ticks; i++)
 25c:	82 3f       	cpi	r24, 0xF2	; 242
 25e:	a8 e0       	ldi	r26, 0x08	; 8
 260:	9a 07       	cpc	r25, r26
 262:	d9 f7       	brne	.-10     	; 0x25a <softwareDelayMs+0x12>
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
  uint32_t ticks=2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 264:	4f 5f       	subi	r20, 0xFF	; 255
 266:	5f 4f       	sbci	r21, 0xFF	; 255
 268:	6f 4f       	sbci	r22, 0xFF	; 255
 26a:	7f 4f       	sbci	r23, 0xFF	; 255
 26c:	40 17       	cp	r20, r16
 26e:	51 07       	cpc	r21, r17
 270:	62 07       	cpc	r22, r18
 272:	73 07       	cpc	r23, r19
 274:	31 f4       	brne	.+12     	; 0x282 <softwareDelayMs+0x3a>
 276:	08 c0       	rjmp	.+16     	; 0x288 <softwareDelayMs+0x40>
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	ba 01       	movw	r22, r20
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	8f 2f       	mov	r24, r31
 284:	9e 2f       	mov	r25, r30
 286:	e9 cf       	rjmp	.-46     	; 0x25a <softwareDelayMs+0x12>
  for(j=0; j<u32_delay_in_ms; j++)
  {
    for(i=0; i<ticks; i++)
    { }
  }
}
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	08 95       	ret

0000028e <__vector_10>:
}
/*================================================================*/
/*====================[ Timers ISR Handlers ]=====================*/

ISR(TIMER0_COMP_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
	//-----
 298:	0f 90       	pop	r0
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	0f 90       	pop	r0
 29e:	1f 90       	pop	r1
 2a0:	18 95       	reti

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
