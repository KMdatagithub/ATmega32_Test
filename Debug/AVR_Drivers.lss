
AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000490  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016de  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f8  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056a  00000000  00000000  0000229a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00002804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a39  00000000  00000000  00002d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001685  00000000  00000000  00003789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004e0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_4>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  74:	0c 94 0c 02 	jmp	0x418	; 0x418 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <gpioPortWrite>:
	}
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    switch(u8_port)
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	41 f0       	breq	.+16     	; 0x90 <gpioPortWrite+0x14>
  80:	28 f0       	brcs	.+10     	; 0x8c <gpioPortWrite+0x10>
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	39 f0       	breq	.+14     	; 0x94 <gpioPortWrite+0x18>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	39 f0       	breq	.+14     	; 0x98 <gpioPortWrite+0x1c>
  8a:	08 95       	ret
   {
        case GPIOA:
                    PORTA_DATA = u8_value;
  8c:	6b bb       	out	0x1b, r22	; 27
                    break;
  8e:	08 95       	ret
        case GPIOB:
                    PORTB_DATA = u8_value;
  90:	68 bb       	out	0x18, r22	; 24
                    break;
  92:	08 95       	ret
        case GPIOC:
                    PORTC_DATA = u8_value;
  94:	65 bb       	out	0x15, r22	; 21
                    break;
  96:	08 95       	ret
        case GPIOD:
                    PORTD_DATA = u8_value;
  98:	62 bb       	out	0x12, r22	; 18
  9a:	08 95       	ret

0000009c <gpioPinDirection>:
   return Port_State;
}

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
   if(u8_direction == OUTPUT)
  9c:	4f 3f       	cpi	r20, 0xFF	; 255
  9e:	c1 f4       	brne	.+48     	; 0xd0 <gpioPinDirection+0x34>
   {
	 switch(u8_port)
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	51 f0       	breq	.+20     	; 0xb8 <gpioPinDirection+0x1c>
  a4:	28 f0       	brcs	.+10     	; 0xb0 <gpioPinDirection+0x14>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	59 f0       	breq	.+22     	; 0xc0 <gpioPinDirection+0x24>
  aa:	83 30       	cpi	r24, 0x03	; 3
  ac:	69 f0       	breq	.+26     	; 0xc8 <gpioPinDirection+0x2c>
  ae:	08 95       	ret
	 {
		case GPIOA:
	            	PORTA_DIR |= (u8_pins);
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	68 2b       	or	r22, r24
  b4:	6a bb       	out	0x1a, r22	; 26
		            break;
  b6:	08 95       	ret
		case GPIOB:
		            PORTB_DIR |= (u8_pins);
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	68 2b       	or	r22, r24
  bc:	67 bb       	out	0x17, r22	; 23
		            break;
  be:	08 95       	ret
		case GPIOC:
		            PORTC_DIR |= (u8_pins);
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	68 2b       	or	r22, r24
  c4:	64 bb       	out	0x14, r22	; 20
		            break;
  c6:	08 95       	ret
		case GPIOD:
		            PORTD_DIR |= (u8_pins);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	68 2b       	or	r22, r24
  cc:	61 bb       	out	0x11, r22	; 17
		            break;
  ce:	08 95       	ret
		default:
		            break;
	 }    
   }
   else if(u8_direction == INPUT)
  d0:	41 11       	cpse	r20, r1
  d2:	1b c0       	rjmp	.+54     	; 0x10a <gpioPinDirection+0x6e>
   {
	 switch(u8_port)
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	59 f0       	breq	.+22     	; 0xee <gpioPinDirection+0x52>
  d8:	28 f0       	brcs	.+10     	; 0xe4 <gpioPinDirection+0x48>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	69 f0       	breq	.+26     	; 0xf8 <gpioPinDirection+0x5c>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	81 f0       	breq	.+32     	; 0x102 <gpioPinDirection+0x66>
  e2:	08 95       	ret
     {
		   case GPIOA:
		                PORTA_DIR &= (~u8_pins);
  e4:	8a b3       	in	r24, 0x1a	; 26
  e6:	60 95       	com	r22
  e8:	68 23       	and	r22, r24
  ea:	6a bb       	out	0x1a, r22	; 26
		                break;
  ec:	08 95       	ret
		   case GPIOB:
		                PORTB_DIR &= (~u8_pins);
  ee:	87 b3       	in	r24, 0x17	; 23
  f0:	60 95       	com	r22
  f2:	68 23       	and	r22, r24
  f4:	67 bb       	out	0x17, r22	; 23
		                break;
  f6:	08 95       	ret
		   case GPIOC:
		                PORTC_DIR &= (~u8_pins);
  f8:	84 b3       	in	r24, 0x14	; 20
  fa:	60 95       	com	r22
  fc:	68 23       	and	r22, r24
  fe:	64 bb       	out	0x14, r22	; 20
		                break;
 100:	08 95       	ret
		   case GPIOD:
		                PORTD_DIR &= (~u8_pins);
 102:	81 b3       	in	r24, 0x11	; 17
 104:	60 95       	com	r22
 106:	68 23       	and	r22, r24
 108:	61 bb       	out	0x11, r22	; 17
 10a:	08 95       	ret

0000010c <gpioPinWrite>:
   }
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
	if(u8_value == HIGH)
 10c:	4f 3f       	cpi	r20, 0xFF	; 255
 10e:	c1 f4       	brne	.+48     	; 0x140 <gpioPinWrite+0x34>
	{
		switch(u8_port)
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	51 f0       	breq	.+20     	; 0x128 <gpioPinWrite+0x1c>
 114:	28 f0       	brcs	.+10     	; 0x120 <gpioPinWrite+0x14>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	59 f0       	breq	.+22     	; 0x130 <gpioPinWrite+0x24>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	69 f0       	breq	.+26     	; 0x138 <gpioPinWrite+0x2c>
 11e:	08 95       	ret
		{
			case GPIOA:
			            PORTA_DATA |= (u8_pins);
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	68 2b       	or	r22, r24
 124:	6b bb       	out	0x1b, r22	; 27
			            break;
 126:	08 95       	ret
			case GPIOB:
			            PORTB_DATA |= (u8_pins);
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	68 2b       	or	r22, r24
 12c:	68 bb       	out	0x18, r22	; 24
			            break;
 12e:	08 95       	ret
			case GPIOC:
			            PORTC_DATA |= (u8_pins);
 130:	85 b3       	in	r24, 0x15	; 21
 132:	68 2b       	or	r22, r24
 134:	65 bb       	out	0x15, r22	; 21
			            break;
 136:	08 95       	ret
			case GPIOD:
		             	PORTD_DATA |= (u8_pins);
 138:	82 b3       	in	r24, 0x12	; 18
 13a:	68 2b       	or	r22, r24
 13c:	62 bb       	out	0x12, r22	; 18
			            break;
 13e:	08 95       	ret
			default:
			            break;
		}
	}
	else if(u8_value == LOW)
 140:	41 11       	cpse	r20, r1
 142:	1b c0       	rjmp	.+54     	; 0x17a <gpioPinWrite+0x6e>
	{
		switch(u8_port)
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	59 f0       	breq	.+22     	; 0x15e <gpioPinWrite+0x52>
 148:	28 f0       	brcs	.+10     	; 0x154 <gpioPinWrite+0x48>
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	69 f0       	breq	.+26     	; 0x168 <gpioPinWrite+0x5c>
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	81 f0       	breq	.+32     	; 0x172 <gpioPinWrite+0x66>
 152:	08 95       	ret
		{
			case GPIOA:
			            PORTA_DATA &= (~u8_pins);
 154:	8b b3       	in	r24, 0x1b	; 27
 156:	60 95       	com	r22
 158:	68 23       	and	r22, r24
 15a:	6b bb       	out	0x1b, r22	; 27
			            break;
 15c:	08 95       	ret
			case GPIOB:
			            PORTB_DATA &= (~u8_pins);
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	60 95       	com	r22
 162:	68 23       	and	r22, r24
 164:	68 bb       	out	0x18, r22	; 24
			            break;
 166:	08 95       	ret
			case GPIOC:
			            PORTC_DATA &= (~u8_pins);
 168:	85 b3       	in	r24, 0x15	; 21
 16a:	60 95       	com	r22
 16c:	68 23       	and	r22, r24
 16e:	65 bb       	out	0x15, r22	; 21
	            		break;
 170:	08 95       	ret
			case GPIOD:
			            PORTD_DATA &= (~u8_pins);
 172:	82 b3       	in	r24, 0x12	; 18
 174:	60 95       	com	r22
 176:	68 23       	and	r22, r24
 178:	62 bb       	out	0x12, r22	; 18
 17a:	08 95       	ret

0000017c <main>:
#include "dcMotor.h"
#include "sevenSeg.h"

int main(void)
{
	sevenSegInit(SEG_0);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 1f 01 	call	0x23e	; 0x23e <sevenSegInit>
	sevenSegInit(SEG_1);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 1f 01 	call	0x23e	; 0x23e <sevenSegInit>
	while(1)
	{
		digit1 = counter/10;
		digit0 = counter%10;
		
		sevenSegWrite(SEG_0, digit0);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sevenSegWrite>
		sevenSegEnable(SEG_0);
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 38 01 	call	0x270	; 0x270 <sevenSegEnable>
		sevenSegDisable(SEG_1);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 49 01 	call	0x292	; 0x292 <sevenSegDisable>
		softwareDelayMs(10);
 19c:	6a e0       	ldi	r22, 0x0A	; 10
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <softwareDelayMs>
		
		sevenSegWrite(SEG_1, digit1);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sevenSegWrite>
		sevenSegEnable(SEG_1);
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	0e 94 38 01 	call	0x270	; 0x270 <sevenSegEnable>
		sevenSegDisable(SEG_0);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 49 01 	call	0x292	; 0x292 <sevenSegDisable>
		softwareDelayMs(10);
 1bc:	6a e0       	ldi	r22, 0x0A	; 10
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 71 01 	call	0x2e2	; 0x2e2 <softwareDelayMs>
		
		c++;
 1c8:	d1 e0       	ldi	r29, 0x01	; 1

int main(void)
{
	sevenSegInit(SEG_0);
	sevenSegInit(SEG_1);
	uint8_t counter = 0, c=0, digit0, digit1;
 1ca:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		digit1 = counter/10;
		digit0 = counter%10;
 1cc:	0d ec       	ldi	r16, 0xCD	; 205
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <main+0x56>
		softwareDelayMs(10);
		
		c++;
		if(c==50)   // Each 1 Second
		{
			c=0;
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
	sevenSegInit(SEG_1);
	uint8_t counter = 0, c=0, digit0, digit1;
	while(1)
	{
		digit1 = counter/10;
		digit0 = counter%10;
 1d2:	10 9f       	mul	r17, r16
 1d4:	c1 2d       	mov	r28, r1
 1d6:	11 24       	eor	r1, r1
 1d8:	c6 95       	lsr	r28
 1da:	c6 95       	lsr	r28
 1dc:	c6 95       	lsr	r28
 1de:	9c 2f       	mov	r25, r28
 1e0:	99 0f       	add	r25, r25
 1e2:	89 2f       	mov	r24, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	88 0f       	add	r24, r24
 1e8:	89 0f       	add	r24, r25
 1ea:	61 2f       	mov	r22, r17
 1ec:	68 1b       	sub	r22, r24
		
		sevenSegWrite(SEG_0, digit0);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sevenSegWrite>
		sevenSegEnable(SEG_0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	0e 94 38 01 	call	0x270	; 0x270 <sevenSegEnable>
		sevenSegDisable(SEG_1);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 49 01 	call	0x292	; 0x292 <sevenSegDisable>
		softwareDelayMs(10);
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 71 01 	call	0x2e2	; 0x2e2 <softwareDelayMs>
		
		sevenSegWrite(SEG_1, digit1);
 20c:	6c 2f       	mov	r22, r28
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <sevenSegWrite>
		sevenSegEnable(SEG_1);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	0e 94 38 01 	call	0x270	; 0x270 <sevenSegEnable>
		sevenSegDisable(SEG_0);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 49 01 	call	0x292	; 0x292 <sevenSegDisable>
		softwareDelayMs(10);
 220:	6a e0       	ldi	r22, 0x0A	; 10
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 71 01 	call	0x2e2	; 0x2e2 <softwareDelayMs>
		
		c++;
 22c:	df 5f       	subi	r29, 0xFF	; 255
		if(c==50)   // Each 1 Second
 22e:	d2 33       	cpi	r29, 0x32	; 50
 230:	81 f6       	brne	.-96     	; 0x1d2 <main+0x56>
		{
			c=0;
			counter++;
 232:	1f 5f       	subi	r17, 0xFF	; 255
			if(counter==100)
 234:	14 36       	cpi	r17, 0x64	; 100
 236:	61 f6       	brne	.-104    	; 0x1d0 <main+0x54>
		softwareDelayMs(10);
		
		c++;
		if(c==50)   // Each 1 Second
		{
			c=0;
 238:	d0 e0       	ldi	r29, 0x00	; 0
			counter++;
			if(counter==100)
			counter = 0;
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	ca cf       	rjmp	.-108    	; 0x1d2 <main+0x56>

0000023e <sevenSegInit>:
 *  Author: Khaled Magdy
 */ 
#include "sevenSeg.h"

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
 23e:	cf 93       	push	r28
 240:	c8 2f       	mov	r28, r24
   gpioPinDirection(SEG_BCD_GPIO, SEG_BCD_BITS,OUTPUT);  
 242:	4f ef       	ldi	r20, 0xFF	; 255
 244:	6f e0       	ldi	r22, 0x0F	; 15
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 4e 00 	call	0x9c	; 0x9c <gpioPinDirection>
   //gpioPinDirection(SEG_BCD_DP_GPIO, SEG_BCD_DP_BIT, OUTPUT);
   switch(a_segment_id)
 24c:	cc 23       	and	r28, r28
 24e:	19 f0       	breq	.+6      	; 0x256 <sevenSegInit+0x18>
 250:	c1 30       	cpi	r28, 0x01	; 1
 252:	39 f0       	breq	.+14     	; 0x262 <sevenSegInit+0x24>
 254:	0b c0       	rjmp	.+22     	; 0x26c <sevenSegInit+0x2e>
   {
       case SEG_0:
                   gpioPinDirection(SEG_EN1_GPIO, SEG_EN1_BIT, OUTPUT);
 256:	4f ef       	ldi	r20, 0xFF	; 255
 258:	64 e0       	ldi	r22, 0x04	; 4
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	0e 94 4e 00 	call	0x9c	; 0x9c <gpioPinDirection>
                   break;
 260:	05 c0       	rjmp	.+10     	; 0x26c <sevenSegInit+0x2e>
       case SEG_1:
                   gpioPinDirection(SEG_EN2_GPIO, SEG_EN2_BIT, OUTPUT);      
 262:	4f ef       	ldi	r20, 0xFF	; 255
 264:	68 e0       	ldi	r22, 0x08	; 8
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	0e 94 4e 00 	call	0x9c	; 0x9c <gpioPinDirection>
                   break;
       default:
                   break;         
   }
}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
   switch(en_segment_id)
 270:	88 23       	and	r24, r24
 272:	19 f0       	breq	.+6      	; 0x27a <sevenSegEnable+0xa>
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	39 f0       	breq	.+14     	; 0x286 <sevenSegEnable+0x16>
 278:	08 95       	ret
   {
      case SEG_0:
                  gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, HIGH);
 27a:	4f ef       	ldi	r20, 0xFF	; 255
 27c:	64 e0       	ldi	r22, 0x04	; 4
 27e:	83 e0       	ldi	r24, 0x03	; 3
 280:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
                  break;
 284:	08 95       	ret
      case SEG_1:
                  gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, HIGH);
 286:	4f ef       	ldi	r20, 0xFF	; 255
 288:	68 e0       	ldi	r22, 0x08	; 8
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
 290:	08 95       	ret

00000292 <sevenSegDisable>:
   }
}

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
   switch(en_segment_id)
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <sevenSegDisable+0xa>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	39 f0       	breq	.+14     	; 0x2a8 <sevenSegDisable+0x16>
 29a:	08 95       	ret
   {
      case SEG_0:
                  gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, LOW);
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	64 e0       	ldi	r22, 0x04	; 4
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
                  break;
 2a6:	08 95       	ret
      case SEG_1:
                  gpioPinWrite(SEG_EN2_GPIO, SEG_EN2_BIT, LOW);
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	68 e0       	ldi	r22, 0x08	; 8
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
 2b2:	08 95       	ret

000002b4 <sevenSegWrite>:
   }
}

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
   switch(en_segment_id)
 2b4:	88 23       	and	r24, r24
 2b6:	19 f0       	breq	.+6      	; 0x2be <sevenSegWrite+0xa>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	51 f0       	breq	.+20     	; 0x2d0 <sevenSegWrite+0x1c>
 2bc:	08 95       	ret
   {
       case SEG_0:
                   gpioPortWrite(SEG_BCD_GPIO, u8_number);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPortWrite>
                   gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, HIGH);
 2c4:	4f ef       	ldi	r20, 0xFF	; 255
 2c6:	64 e0       	ldi	r22, 0x04	; 4
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
                   break;
 2ce:	08 95       	ret
       case SEG_1:
                   gpioPortWrite(SEG_BCD_GPIO, u8_number);
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 3e 00 	call	0x7c	; 0x7c <gpioPortWrite>
                   gpioPinWrite(SEG_EN1_GPIO, SEG_EN1_BIT, HIGH);
 2d6:	4f ef       	ldi	r20, 0xFF	; 255
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	83 e0       	ldi	r24, 0x03	; 3
 2dc:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
 2e0:	08 95       	ret

000002e2 <softwareDelayMs>:
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	8b 01       	movw	r16, r22
 2e8:	9c 01       	movw	r18, r24
  uint32_t ticks=2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 2ea:	67 2b       	or	r22, r23
 2ec:	68 2b       	or	r22, r24
 2ee:	69 2b       	or	r22, r25
 2f0:	81 f4       	brne	.+32     	; 0x312 <softwareDelayMs+0x30>
 2f2:	17 c0       	rjmp	.+46     	; 0x322 <softwareDelayMs+0x40>
 2f4:	01 96       	adiw	r24, 0x01	; 1
  {
    for(i=0; i<ticks; i++)
 2f6:	82 3f       	cpi	r24, 0xF2	; 242
 2f8:	a8 e0       	ldi	r26, 0x08	; 8
 2fa:	9a 07       	cpc	r25, r26
 2fc:	d9 f7       	brne	.-10     	; 0x2f4 <softwareDelayMs+0x12>
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
  uint32_t ticks=2290, i, j;
  for(j=0; j<u32_delay_in_ms; j++)
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	6f 4f       	sbci	r22, 0xFF	; 255
 304:	7f 4f       	sbci	r23, 0xFF	; 255
 306:	40 17       	cp	r20, r16
 308:	51 07       	cpc	r21, r17
 30a:	62 07       	cpc	r22, r18
 30c:	73 07       	cpc	r23, r19
 30e:	31 f4       	brne	.+12     	; 0x31c <softwareDelayMs+0x3a>
 310:	08 c0       	rjmp	.+16     	; 0x322 <softwareDelayMs+0x40>
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	ba 01       	movw	r22, r20
 */ 
#include "softwareDelay.h"
#include "std_types.h"

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	8f 2f       	mov	r24, r31
 31e:	9e 2f       	mov	r25, r30
 320:	e9 cf       	rjmp	.-46     	; 0x2f4 <softwareDelayMs+0x12>
  for(j=0; j<u32_delay_in_ms; j++)
  {
    for(i=0; i<ticks; i++)
    { }
  }
}
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	08 95       	ret

00000328 <__vector_10>:
/*================================================================*/
/*====================[ Timers ISR Handlers ]=====================*/
/*================================================================*/
// Timer0 Compare Match ISR
ISR(TIMER0_COMP_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
	//-----
}
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__vector_4>:
// Timer2 Compare Match ISR
ISR(TIMER2_COMP_vect)
{
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	2f 93       	push	r18
 354:	3f 93       	push	r19
 356:	4f 93       	push	r20
 358:	5f 93       	push	r21
 35a:	6f 93       	push	r22
 35c:	7f 93       	push	r23
 35e:	8f 93       	push	r24
 360:	9f 93       	push	r25
 362:	af 93       	push	r26
 364:	bf 93       	push	r27
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	if(gen_SoftPWM_State == TRUE)
 36e:	80 91 60 00 	lds	r24, 0x0060
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	c1 f5       	brne	.+112    	; 0x3e6 <__vector_4+0xaa>
	{
		uint8_t index;
		gen_SoftPWM_C++;
 376:	80 91 61 00 	lds	r24, 0x0061
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	80 93 61 00 	sts	0x0061, r24
 380:	0f 2e       	mov	r0, r31
 382:	f2 e6       	ldi	r31, 0x62	; 98
 384:	ef 2e       	mov	r14, r31
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ff 2e       	mov	r15, r31
 38a:	f0 2d       	mov	r31, r0
 38c:	c4 e6       	ldi	r28, 0x64	; 100
 38e:	d0 e0       	ldi	r29, 0x00	; 0
 390:	06 e6       	ldi	r16, 0x66	; 102
 392:	10 e0       	ldi	r17, 0x00	; 0
 394:	0f 2e       	mov	r0, r31
 396:	f6 e6       	ldi	r31, 0x66	; 102
 398:	cf 2e       	mov	r12, r31
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	df 2e       	mov	r13, r31
 39e:	f0 2d       	mov	r31, r0
		for(index=0; index<SoftPWM_Outputs; index++)
		{
			if(gen_SoftPWM_C >= gen_SoftPWM_DC[index])
 3a0:	f7 01       	movw	r30, r14
 3a2:	91 91       	ld	r25, Z+
 3a4:	7f 01       	movw	r14, r30
 3a6:	80 91 61 00 	lds	r24, 0x0061
 3aa:	89 17       	cp	r24, r25
 3ac:	30 f0       	brcs	.+12     	; 0x3ba <__vector_4+0x7e>
			gpioPinWrite(gen_SoftPWM_Port[index], gen_SoftPWM_Pin[index], LOW);
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	68 81       	ld	r22, Y
 3b2:	f8 01       	movw	r30, r16
 3b4:	80 81       	ld	r24, Z
 3b6:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
			if(gen_SoftPWM_C >= 100)
 3ba:	80 91 61 00 	lds	r24, 0x0061
 3be:	84 36       	cpi	r24, 0x64	; 100
 3c0:	30 f0       	brcs	.+12     	; 0x3ce <__vector_4+0x92>
			gpioPinWrite(gen_SoftPWM_Port[index], gen_SoftPWM_Pin[index], HIGH);
 3c2:	4f ef       	ldi	r20, 0xFF	; 255
 3c4:	68 81       	ld	r22, Y
 3c6:	f8 01       	movw	r30, r16
 3c8:	80 81       	ld	r24, Z
 3ca:	0e 94 86 00 	call	0x10c	; 0x10c <gpioPinWrite>
 3ce:	21 96       	adiw	r28, 0x01	; 1
 3d0:	0f 5f       	subi	r16, 0xFF	; 255
 3d2:	1f 4f       	sbci	r17, 0xFF	; 255
{
	if(gen_SoftPWM_State == TRUE)
	{
		uint8_t index;
		gen_SoftPWM_C++;
		for(index=0; index<SoftPWM_Outputs; index++)
 3d4:	cc 15       	cp	r28, r12
 3d6:	dd 05       	cpc	r29, r13
 3d8:	19 f7       	brne	.-58     	; 0x3a0 <__vector_4+0x64>
			if(gen_SoftPWM_C >= gen_SoftPWM_DC[index])
			gpioPinWrite(gen_SoftPWM_Port[index], gen_SoftPWM_Pin[index], LOW);
			if(gen_SoftPWM_C >= 100)
			gpioPinWrite(gen_SoftPWM_Port[index], gen_SoftPWM_Pin[index], HIGH);
		}
		if(gen_SoftPWM_C >= 100)
 3da:	80 91 61 00 	lds	r24, 0x0061
 3de:	84 36       	cpi	r24, 0x64	; 100
 3e0:	10 f0       	brcs	.+4      	; 0x3e6 <__vector_4+0xaa>
		gen_SoftPWM_C = 0;
 3e2:	10 92 61 00 	sts	0x0061, r1
	}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	bf 91       	pop	r27
 3f0:	af 91       	pop	r26
 3f2:	9f 91       	pop	r25
 3f4:	8f 91       	pop	r24
 3f6:	7f 91       	pop	r23
 3f8:	6f 91       	pop	r22
 3fa:	5f 91       	pop	r21
 3fc:	4f 91       	pop	r20
 3fe:	3f 91       	pop	r19
 400:	2f 91       	pop	r18
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	df 90       	pop	r13
 40c:	cf 90       	pop	r12
 40e:	0f 90       	pop	r0
 410:	0f be       	out	0x3f, r0	; 63
 412:	0f 90       	pop	r0
 414:	1f 90       	pop	r1
 416:	18 95       	reti

00000418 <_exit>:
 418:	f8 94       	cli

0000041a <__stop_program>:
 41a:	ff cf       	rjmp	.-2      	; 0x41a <__stop_program>
